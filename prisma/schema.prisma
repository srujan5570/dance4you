generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                      String                    @id @default(cuid())
  email                   String                    @unique
  name                    String?
  passwordHash            String
  role                    Role                      @default(STUDENT)
  chatVisibility          ChatVisibility            @default(PUBLIC)
  createdAt               DateTime                  @default(now())
  emailVerified           Boolean                   @default(false)
  otpExpires              DateTime?
  otpHash                 String?
  bookings                Booking[]
  conversationMemberships ConversationParticipant[]
  events                  Event[]
  messagesSent            Message[]
  studioProfile           StudioProfile?
  pushSubscriptions       PushSubscription[]
}

model Event {
  id           String        @id @default(cuid())
  title        String
  city         String
  state        String?
  date         String
  style        String
  image        String
  posterUrls   String?       @default("[]")
  poster4x3    String?
  posterDetail String?
  description  String?
  contactPhone String?
  contactEmail String?
  venueAddress String?
  venueMapUrl  String?
  contactNotes String?
  locationLat  Float?
  locationLng  Float?
  category     EventCategory @default(DROP_IN_CLASS)
  startTime    String?
  endTime      String?
  venueName    String?
  fee          String?
  instructor   String?
  recurrence   String?
  battleRules  String?
  prizes       String?
  // Drop-in class fields for regular classes
  enableDropInClass Boolean?  @default(false)
  dropInFee         String?
  dropInDescription String?
  createdAt    DateTime      @default(now())
  ownerId      String?
  bookings     Booking[]
  owner        User?         @relation(fields: [ownerId], references: [id])
}

model Booking {
  id        String        @id @default(cuid())
  eventId   String
  name      String
  email     String
  tickets   Int           @default(1)
  note      String?
  createdAt DateTime      @default(now())
  status    BookingStatus @default(ACTIVE)
  userId    String?
  // Drop-in booking specific fields
  isDropInBooking Boolean   @default(false)
  dropInFee       String?
  event     Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User?         @relation(fields: [userId], references: [id])
}

model StudioProfile {
  id           String   @id @default(cuid())
  ownerId      String   @unique
  name         String
  addressLine1 String?
  addressLine2 String?
  city         String?
  state        String?
  country      String?
  postalCode   String?
  phone        String?
  email        String?
  website      String?
  description  String?
  locationLat  Float
  locationLng  Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  owner        User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Conversation {
  id                 String                    @id @default(cuid())
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  status             ConversationStatus        @default(ACTIVE)
  requestInitiatorId String?
  participants       ConversationParticipant[]
  messages           Message[]
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  conversationId String
  userId         String
  lastReadAt     DateTime?
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderId       String
  text           String
  createdAt      DateTime     @default(now())
  attachments    Attachment[]
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt(sort: Desc)])
}

model Attachment {
  id        String   @id @default(cuid())
  messageId String
  url       String
  mimeType  String?
  size      Int?
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
}

model PushSubscription {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, endpoint])
}

enum Role {
  STUDENT
  STUDIO_OWNER
}

enum EventCategory {
  DROP_IN_CLASS
  DANCE_WORKSHOP
  REGULAR_CLASS
  BATTLE_COMPETITION
}

enum BookingStatus {
  ACTIVE
  CANCELLED
}

enum ChatVisibility {
  PUBLIC
  PRIVATE
}

enum ConversationStatus {
  ACTIVE
  REQUEST_PENDING
  REQUEST_DECLINED
}
